<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://diego3893.github.io</id>
    <title>Diego&apos;s Blog</title>
    <updated>2020-02-28T04:22:16.939Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://diego3893.github.io"/>
    <link rel="self" href="https://diego3893.github.io/atom.xml"/>
    <subtitle>Stay hungry, Stay foolish</subtitle>
    <logo>https://diego3893.github.io/images/avatar.png</logo>
    <icon>https://diego3893.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Diego&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[github + Gridea免费搭建静态博客]]></title>
        <id>https://diego3893.github.io/post/github-gridea-mian-fei-da-jian-jing-tai-bo-ke/</id>
        <link href="https://diego3893.github.io/post/github-gridea-mian-fei-da-jian-jing-tai-bo-ke/">
        </link>
        <updated>2020-02-28T01:39:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0-gridea的优缺点">0 Gridea的优缺点</h1>
<p><strong>优点</strong>：</p>
<ul>
<li>使用简单</li>
<li>零成本</li>
<li>无需代码配置</li>
<li>界面美观</li>
<li>离线编辑，在线同步</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>
<p>新软件没有详细说明 <s>（所以需要看我的博客）</s></p>
<hr>
<h1 id="1-准备工作">1 准备工作</h1>
<h2 id="安装git可选和gridea">安装git（可选）和Gridea</h2>
</li>
</ul>
<ul>
<li>
<p>可以从官网安装：</p>
<blockquote>
<p><a href="https://git-scm.com/downloads" title="git下载地址">git</a></p>
</blockquote>
<blockquote>
<p><a href="https://gridea.dev" title="gridea下载地址">Gridea</a></p>
</blockquote>
</li>
<li>
<p>可以从百度网盘安装</p>
<blockquote>
<p><a href="https://pan.baidu.com/s/1nTCfBIsZqMGD8tokXiEdYQ" title="网盘资源">网盘资源</a><br>
<mark>提取码：ck6t</mark></p>
<blockquote>
<p>有git、gridea安装包和gridea主题  <em><strong>（仅限win）</strong></em></p>
</blockquote>
</blockquote>
</li>
</ul>
<hr>
<h1 id="2-安装软件">2 安装软件</h1>
<h2 id="21-安装git可选">2.1 安装git（可选）</h2>
<p>参考<a href="https://blog.csdn.net/qq_32786873/article/details/80570783" title="git安装教程">这个</a></p>
<h2 id="22-安装gridea">2.2 安装Gridea</h2>
<p>双击exe，选择全用户安装（第一个选项），然后一路<em>下一步</em>即可</p>
<hr>
<h1 id="3-搭建网站">3 搭建网站</h1>
<h2 id="30-加速github">3.0 加速github</h2>
<p>参考<a href="https://blog.csdn.net/qianglei6077/article/details/90051554" title="win10加速">这个</a><br>
<em>无法保存hosts</em><a href="https://jingyan.baidu.com/article/9113f81b49ed2f2b3214c7fa.html%22%E6%B7%BB%E5%8A%A0%E6%9D%83%E9%99%90%22">解决办法</a></p>
<h2 id="31注册github有账号者略过">3.1注册github（有账号者略过）</h2>
<p>进入<a href="https://github.com">github</a><br>
具体步骤和其他注册方式无太大区别，此处不再赘述</p>
<h2 id="32-创建仓库">3.2 创建仓库</h2>
<p>点击<strong>New repository</strong><br>
<img src="https://s2.ax1x.com/2020/02/28/3BGwZT.jpg" alt="creat" loading="lazy"><br>
<mark>Repository name</mark>填写<em>用户名.github.io</em><br>
<code>e.g. 用户名为kkk， 则Repository name填写kkk.github.io</code><br>
Description可以<strong>不填</strong><br>
其余设置参照下图，然后点击<em>Create repository</em><br>
<img src="https://s2.ax1x.com/2020/02/28/3BJo7T.jpg" alt="creat0" loading="lazy"></p>
<h2 id="33-获取token">3.3 获取token</h2>
<ul>
<li>进入用户设置<br>
<img src="https://s2.ax1x.com/2020/02/28/3BNR9e.jpg" alt="token0" loading="lazy"></li>
<li>进入开发者设置<br>
<img src="https://s2.ax1x.com/2020/02/28/3BUk34.jpg" alt="token1" loading="lazy"></li>
<li>选择最后一项，然后新建一个token<br>
<img src="https://s2.ax1x.com/2020/02/28/3BU524.jpg" alt="token2" loading="lazy"></li>
<li>Note随便填，只勾选repo权限<br>
<img src="https://s2.ax1x.com/2020/02/28/3BaiZt.jpg" alt="token3" loading="lazy"></li>
<li>点击页面最下方的绿色按钮<em>Generate token</em></li>
<li>你会得到一长串编码，<mark>把它保存下来</mark>，因为 <em><strong>以后你再也见不到它了</strong></em><br>
<img src="https://s2.ax1x.com/2020/02/28/3BdNh8.jpg" alt="token4" loading="lazy"></li>
</ul>
<hr>
<h1 id="4-gridea设置博客">4 gridea设置博客</h1>
<h2 id="41-将博客同步至网页">4.1 将博客同步至网页</h2>
<p>在<strong>远程</strong>中设置如图<br>
<img src="https://s2.ax1x.com/2020/02/28/3B0q6e.jpg" alt="setting" loading="lazy"><br>
点击<strong>保存</strong>，点击<strong>检测远程连接</strong></p>
<blockquote>
<p>如果失败请检查设置信息是否正确<br>
若一切正确但无法连接，参考<a href="https://yeming.site/post/gridea_help/">这篇文章</a><br>
然后点击左下角的<strong>同步</strong></p>
</blockquote>
<h2 id="42-主题美化">4.2 主题美化</h2>
<p>将网盘资源中的<em>gridea-themes</em>解压，把里面的每个单文件夹（如song、jia、lin等）放入<mark>站点源文件夹</mark>中<strong>如下图</strong><br>
<img src="https://s2.ax1x.com/2020/02/28/3BsK9P.jpg" alt="theme" loading="lazy"><br>
<img src="https://s2.ax1x.com/2020/02/28/3Bsnht.jpg" alt="theme0" loading="lazy"><br>
重启后就可以选择主题了 <s>我使用的是佳</s></p>
<h2 id="43-评论设置">4.3 评论设置</h2>
<h3 id="431-新建一个仓库">4.3.1 新建一个仓库</h3>
<p>设置默认，命名为blog-comment</p>
<h3 id="432进入github账户的开发者设置">4.3.2进入github账户的<strong>开发者设置</strong></h3>
<p><img src="https://s2.ax1x.com/2020/02/28/3By18x.jpg" alt="comment" loading="lazy"><br>
新建App，设置如下<br>
<img src="https://s2.ax1x.com/2020/02/28/3BcN4A.jpg" alt="comment0" loading="lazy"><br>
保存两行代码<br>
<img src="https://s2.ax1x.com/2020/02/28/3BctNd.jpg" alt="comment1" loading="lazy"></p>
<h3 id="433-连接至博客">4.3.3 连接至博客</h3>
<p>设置如下：<br>
<img src="https://s2.ax1x.com/2020/02/28/3BgExP.jpg" alt="blog" loading="lazy"><br>
<code>每篇文章都需要初始化评论，新文章评论区github登陆</code></p>
<hr>
<h1 id="5-编辑博文">5 编辑博文</h1>
<p>使用markdown编辑，语法自行百度，不再介绍<br>
<mark>这个应用不会自动同步，需要点击同步按钮</mark></p>
<hr>
<p>感谢阅读本蒟蒻的博客，如有问题请在下方评论<br>
欢迎参观我的<a href="https://diego3893.github.io">博客</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小生成树]]></title>
        <id>https://diego3893.github.io/post/zui-xiao-sheng-cheng-shu/</id>
        <link href="https://diego3893.github.io/post/zui-xiao-sheng-cheng-shu/">
        </link>
        <updated>2020-02-27T12:35:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="kruskal">Kruskal</h1>
<h2 id="原理">原理</h2>
<blockquote>
<p><strong>以边来求</strong></p>
<blockquote>
<p>排序实现</p>
</blockquote>
</blockquote>
<blockquote>
<p>依次检查边是否处于联通块中</p>
<blockquote>
<p><a href="https://diego3893.github.io/post/bing-cha-ji/" title="我的另一篇文章">并查集</a> 实现</p>
</blockquote>
</blockquote>
<blockquote>
<p>以保证图连通且路径总权值最小</p>
<p>时间复杂度: O(M log M)</p>
</blockquote>
<h3 id="优化">优化</h3>
<pre><code class="language-cpp">if(k == n-1)
    break;
</code></pre>
<p>其中<em>k</em>为已选边数，<em>n</em>为点数，因为为连通的<mark>树</mark>, 所以<code>边数=点数-1</code></p>
<h2 id="模版">模版</h2>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
void merge(int, int);
int getf(int);
void add_edge(int, int, int);
int f[1002] = {}, edge_num = 0, n, m;
struct node{
	int u, v, w;
}edge[100002];
bool cmp(const node&amp;, const node&amp;);

int main()
{
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	int a, b, c;
	for(int i=1; i&lt;=m; ++i)
	{
		scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);
		add_edge(a, b, c);
	}
	sort(edge+1, edge+edge_num+1, cmp);
	int ans = -0x7ffffff, k = 0;
	int flag = 0;
	for(int i=1; i&lt;=m; ++i)
	{
		int t1 = getf(edge[i].u), t2 = getf(edge[i].v);
		if(t1 != t2)
		{
			merge(t1, t2);
			if(ans &lt; edge[i].w)
				ans = edge[i].w;
			++k;
		}
		if(k == n-1)
		{
			flag = 1;
			break;
		}
	}
	if(!flag)
		printf(&quot;-1&quot;);
	else
		printf(&quot;%d&quot;, ans);
	return 0;
}

bool cmp(const node &amp;a, const node &amp;b)
{
	return a.w &lt; b.w;
}
void add_edge(int a, int b, int c)
{
	edge[++edge_num].u = a;
	edge[edge_num].v = b;
	edge[edge_num].w = c;
	return;
}
void merge(int x, int y)
{
	int t1 = getf(x), t2 = getf(y);
	if(t1 != t2)
		f[t2] = t1;
	return;
}
int getf(int x)
{
	if(f[x]!=x &amp;&amp; f[x]!=0)
		return f[x] = getf(f[x]);
	return x;
}
</code></pre>
<p>代码题目 <a href="https://www.luogu.com.cn/problem/P1111" title="洛谷P1111">传送门</a></p>
<hr>
<h1 id="prim">Prim</h1>
<h2 id="原理-2">原理</h2>
<blockquote>
<p>类似<mark>Dijkstra</mark>的<strong>松弛</strong>， 依次将白点变为蓝点</p>
<blockquote>
<p>需要一个数组<strong>打标记</strong>，用<em>k</em>记录最小出边（初始化<code>k = -1</code>)</p>
</blockquote>
<p>每次将dis数组更新为当前节点的所有出边的权值<br>
找拥有最小权值的出边<em>k</em><br>
打标记<code>book[k] = 1;</code><br>
以<em>k</em>节点重复第一步</p>
<p>求和dis数组，即为最短路径和<br>
时间复杂度：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</p>
</blockquote>
<h2 id="模版-2">模版</h2>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int g[102][102];
int minn[102];
int book[102] = {};
int main()
{
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	for(int i=1; i&lt;=n; ++i)
		for(int j=1; j&lt;=n; ++j)
			scanf(&quot;%d&quot;, &amp;g[i][j]);
	memset(minn, 0x7f, sizeof(minn));
	minn[1] = 0;
	memset(book, 0, sizeof(book));
	for(int i=1; i&lt;=n; ++i)
	{
		int k = 0;
		for(int j=1; j&lt;=n; ++j)
			if(!book[j] &amp;&amp; (minn[j]&lt;minn[k]))
				k = j;
		book[k] = 1;
		for(int j=1; j&lt;=n; ++j)
			if(!book[j] &amp;&amp; (g[k][j]&lt;minn[j]))
				minn[j] = g[k][j];
	}
	int ans = 0;
	for(int i=1; i&lt;=n; ++i)
		ans += minn[i];
	printf(&quot;%d&quot;, ans);
	return 0;
}
</code></pre>
<p>代码题目<a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1349" title="一本通1349">传送门</a></p>
<hr>
<h1 id="选择">选择</h1>
<p><strong>Prim</strong>适合<mark>稠密图</mark>，<strong>Kruskal</strong>适合<mark>稀疏图</mark></p>
<p>本蒟蒻小声BB：<s>最小生成树其实不难</s>  欢迎来我的<a href="https://diego3893.github.io/" title="Diego's Blog">博客</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并查集]]></title>
        <id>https://diego3893.github.io/post/bing-cha-ji/</id>
        <link href="https://diego3893.github.io/post/bing-cha-ji/">
        </link>
        <updated>2020-02-27T01:02:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="技巧">技巧</h1>
<p>可以不用一下代码初始化与找根</p>
<pre><code class="language-cpp">for(int i=1; i&lt;=n; ++i)
    f[i] = i;

int getf(int x)
{
    if(f[x] == x)
        return x;
    return f[x] = getf(f[x]);
}
</code></pre>
<h2 id="简化后">简化后</h2>
<pre><code class="language-cpp">int getf(int x)
{
    if(f[x]!=0 &amp;&amp; f[x]!=x)
        return f[x] = getf(f[x]);
    return x;
}
</code></pre>
<hr>
<h1 id="原理">原理</h1>
<blockquote>
<p>以递归压缩路径———getf<br>
合并路径——将节点编号变为根节点编号</p>
<blockquote>
<p>根相同，则在同一个子集</p>
</blockquote>
</blockquote>
<p><strong>模版</strong> <em>并查集</em></p>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
using namespace std;
int getf(int);
void merge(int, int);
inline int fread();
int n, m, f[20002] = {}, q;
int main()
{
	n = fread();
	m = fread();
	int a, b;
	for(int i=1; i&lt;=m; ++i)
	{
		a = fread();
		b = fread();
		merge(a, b);
	}
	q = fread();
	for(int i=1; i&lt;=q; ++i)
	{
		a = fread();
		b = fread();
		int t1 = getf(a), t2 = getf(b);
		if(t1 == t2)
			printf(&quot;Yes\n&quot;);
		else
			printf(&quot;No\n&quot;);
	}
	return 0;
}
int getf(int v)
{
	if(f[x]!=x &amp;&amp; f[x]!=0)
        return f[x] = getf(f[x]);
    return x;
}
void merge(int v, int u) 
{
	int t1, t2;
	t1 = getf(v);
	t2 = getf(u);
	if(t1 != t2)
		f[t2] = t1;
	return;
}
inline int fread()
{
    int x=0,f=1;
    char ch=getchar();
    while(ch&lt;'0'||ch&gt;'9'){
        if(ch=='-')
            f=-1;
        ch=getchar();
    }
    while(ch&gt;='0'&amp;&amp;ch&lt;='9'){
        x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48);
        ch=getchar();
    }
    return x*f;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://diego3893.github.io/post/hello-gridea/</id>
        <link href="https://diego3893.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>