<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://diego3893.github.io</id>
    <title>Diego&apos;s Blog</title>
    <updated>2020-03-20T10:34:43.421Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://diego3893.github.io"/>
    <link rel="self" href="https://diego3893.github.io/atom.xml"/>
    <subtitle>Stay hungry, Stay foolish</subtitle>
    <logo>https://diego3893.github.io/images/avatar.png</logo>
    <icon>https://diego3893.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Diego&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[高精度]]></title>
        <id>https://diego3893.github.io/post/gao-jing-du/</id>
        <link href="https://diego3893.github.io/post/gao-jing-du/">
        </link>
        <updated>2020-03-14T13:20:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="原理竖式计算">原理：竖式计算</h1>
<p><strong>注意：倒序存储</strong></p>
<h1 id="加减法">加/减法</h1>
<h2 id="模版加减差不多">模版（加，减差不多）</h2>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
struct sd{
	int d[300], len;
}a, b;
sd read_num();
sd Plus(sd, sd);
void print(sd);
int main()
{
	a = read_num(), b = read_num();
	a = Plus(a, b);
	print(a);
	return 0;
}
sd read_num()
{
	sd x;
	memset(x.d, 0, sizeof(x.d));
	char s[300];
	cin &gt;&gt; s;
	x.len = strlen(s);
	int k = 0;
	for(int i=x.len-1; i&gt;=0; --i)
		x.d[k++] = s[i]-'0';
	return x;
}
sd Plus(sd x, sd y)
{
	sd t;
	memset(t.d, 0, sizeof(t.d));
	int len = x.len&gt;y.len?x.len:y.len;
	//printf(&quot;%d\n&quot;, len);
	for(int i=0; i&lt;len; ++i)
	{
		//printf(&quot;%d %d\n&quot;, x.d[i], y.d[i]);
		t.d[i] += x.d[i]+y.d[i];
		//printf(&quot;%d &quot;, (int)t.d[i]);
		t.d[i+1] = t.d[i]/10;
		//printf(&quot;%d &quot;, (int)t.d[i+1]);
		t.d[i] = t.d[i]%10;
		//printf(&quot;%d\n&quot;, (int)t.d[i]);
	}
	if(t.d[len] &gt; 0)
		t.len = len+1;
	else
		t.len = len;
	return t;
}
void print(sd x)
{
	for(int i=x.len-1; i&gt;=0; --i)
		printf(&quot;%d&quot;, (int)x.d[i]);
	return;
}
</code></pre>
<hr>
<h1 id="乘法">乘法</h1>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
struct sd{
	int d[300], len;
}a, b;
sd read_num();
sd Mult(sd, sd);
void print(sd);
int main()
{
	a = read_num(), b = read_num();
	a = Mult(a, b);
	print(a);
	return 0;
}
sd read_num()
{
	sd x;
	memset(x.d, 0, sizeof(x.d));
	char s[300];
	cin &gt;&gt; s;
	x.len = strlen(s);
	int k = 0;
	for(int i=x.len-1; i&gt;=0; --i)
		x.d[k++] = s[i]-'0';
	return x;
}
sd Mult(sd x, sd y)
{
	sd t;
	memset(t.d, 0, sizeof(t.d));
	//int len = x.len&gt;y.len?x.len:y.len;
	//printf(&quot;%d\n&quot;, len);
	for(int i=0; i&lt;x.len; ++i)
	{
		int temp = 0;
		for(int j=0; j&lt;y.len; ++j)
		{
			t.d[i+j] = x.d[i]*y.d[j]+temp+t.d[i+j];
			temp = t.d[i+j]/10;
			t.d[i+j] %= 10;
		}
		t.d[i+y.len] = temp;
	}
	t.len = x.len+y.len;
	return t;
}
void print(sd x)
{
	while(x.d[x.len-1]==0 &amp;&amp; x.len&gt;0)
		--x.len;
	for(int i=x.len-1; i&gt;=0; --i)
		printf(&quot;%d&quot;, (int)x.d[i]);
	return;
}
</code></pre>
<hr>
<p>#除法</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[哈希算法]]></title>
        <id>https://diego3893.github.io/post/ha-xi-suan-fa/</id>
        <link href="https://diego3893.github.io/post/ha-xi-suan-fa/">
        </link>
        <updated>2020-03-14T11:41:12.000Z</updated>
        <content type="html"><![CDATA[<p>对数据进行处理，方便<strong>匹配</strong></p>
<h1 id="整数">整数</h1>
<h2 id="原理">原理</h2>
<blockquote>
<p>用hash操作，将数作为数组下标存储<br>
照搬原话：<code>大数化小，小数化了（不变）</code><br>
hash冲突：1.线性 2.链式结构</p>
</blockquote>
<h2 id="线性伪代码">线性伪代码：</h2>
<pre><code class="language-cpp">int k = x/m;
int p = flag[k];
while(1)
{
if(hash[p]==x)
{
printf(&quot;%d&quot;,hash[p]);
break;
}
if(hash[p]==0)
{
hash[p]=x;
break;
}
if(hash[p]!=x&amp;&amp;hash[p]!=0)
++p;
}
</code></pre>
<hr>
<h1 id="字符串重点">字符串（重点）</h1>
<h2 id="原理-2">原理</h2>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>A</mi><mi>S</mi><msub><mi>H</mi><mi>C</mi></msub><mo>=</mo><mo>(</mo><msub><mi>C</mi><mn>1</mn></msub><mo>∗</mo><msup><mi>b</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>C</mi><mn>2</mn></msub><mo>∗</mo><msup><mi>b</mi><mrow><mi>m</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mo>…</mo><mo>…</mo><mo>+</mo><msub><mi>C</mi><mi>m</mi></msub><mo>∗</mo><msup><mi>b</mi><mn>0</mn></msup><mo>)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">HASH_C = (C_1*b^{m-1}+C_2*b^{m-2}+ …… +C_m*b^0) mod h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">h</span></span></span></span>    <mark><strong>b，h互质</strong></mark></p>
<p>字符处理：映射:</p>
<blockquote>
<p>A-&gt;1,B-&gt;2,……,a-&gt;27,b-&gt;28</p>
</blockquote>
</blockquote>
<blockquote>
<p>匹配一段字符串：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>A</mi><mi>S</mi><msub><mi>H</mi><mi>D</mi></msub><mo>=</mo><mi>H</mi><mi>A</mi><mi>S</mi><msub><mi>H</mi><mrow><mi>C</mi><mo separator="true">,</mo><mi>k</mi><mo>+</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>D</mi></mrow></msub><mo>−</mo><mi>H</mi><mi>A</mi><mi>S</mi><msub><mi>H</mi><mrow><mi>C</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mo>∗</mo><msup><mi>b</mi><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>D</mi></mrow></msup></mrow><annotation encoding="application/x-tex">HASH_D = HASH_{C,k+lenD}-HASH_{C,k}*b^{lenD}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span></span></p>
<blockquote>
<p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>A</mi><mi>S</mi><msub><mi>H</mi><mrow><mi>C</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">HASH_{C,k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示字符串C前k个字符的哈希值</strong></p>
<blockquote>
<p>乘以lenD原因如图，自行理解：<br>
<img src="https://cdn.jsdelivr.net/gh/diego3893/blog-FILE/article/lenD.png" alt="lenD" loading="lazy"></p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="同余当-blen过大时">同余(当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">b^{len}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>过大时)</h2>
<p>(a+b) mod c = (a mod c + b mod c) mod c<br>
ab mod c = (a mod c * b mod c) mod c</p>
<h2 id="模版">模版</h2>
<p>求T组大写字符串中s1在s2中出现了几次：</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
typedef unsigned long long ULL;
ULL power[1000002];
ULL T, b = 2;
char s1[10002], s2[1000002];
ULL sum[1000002], s;
int main()
{
	power[0] = 1;
	for(int i=1; i&lt;1000000; ++i)
		power[i] = power[i-1]*b;
	scanf(&quot;%lld&quot;, &amp;T);
	while(T--)
	{
		scanf(&quot;%s%s&quot;, s1+1, s2+1);
		int n = strlen(s1+1), m = strlen(s2+1);
		sum[0] = 0;
		for(int i=1; i&lt;=m; ++i)
			sum[i] = sum[i-1]*b+(ULL)(s2[i]-'A'+1);
		s = 0;
		for(int i=1; i&lt;=n; ++i)
			s = s*b+(ULL)(s1[i]-'A'+1);
		int ans = 0;
		for(int i=0; i&lt;=m-n; ++i)
			if(s==sum[i+n]-sum[i]*power[n])
				++ans;
		printf(&quot;%d\n&quot;, ans);
		
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费CDN]]></title>
        <id>https://diego3893.github.io/post/mian-fei-cdn/</id>
        <link href="https://diego3893.github.io/post/mian-fei-cdn/">
        </link>
        <updated>2020-03-11T12:31:38.000Z</updated>
        <content type="html"><![CDATA[<p>GITHUB：<code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code><br>
详参：<a href="https://www.jsdelivr.com/?docs=gh">官网</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Valine评论设置邮箱提醒（转）]]></title>
        <id>https://diego3893.github.io/post/valine-ping-lun-she-zhi-you-xiang-ti-xing-zhuan/</id>
        <link href="https://diego3893.github.io/post/valine-ping-lun-she-zhi-you-xiang-ti-xing-zhuan/">
        </link>
        <updated>2020-03-09T14:57:25.000Z</updated>
        <content type="html"><![CDATA[<p>链接：<code>https://blog.csdn.net/cungudafa/article/details/104497664</code><br>
转自：CSDN，cungudafa<br>
如有侵权，邮箱联系我：3013006997@qq.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树状数组]]></title>
        <id>https://diego3893.github.io/post/shu-zhuang-shu-zu/</id>
        <link href="https://diego3893.github.io/post/shu-zhuang-shu-zu/">
        </link>
        <updated>2020-03-07T13:48:06.000Z</updated>
        <content type="html"><![CDATA[<p><s>这是比较让我这个蒟蒻绝望的东西（以后可能一直这样）</s></p>
<h1 id="原理">原理</h1>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/03/07/3jRuE4.png" alt="tree" loading="lazy"></figure>
<blockquote>
<p>形态如图</p>
</blockquote>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>x</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>x</mi><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mn>1</mn></mrow><mrow><mi>x</mi><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mi>x</mi></mrow></msubsup><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_x = \sum_{i=x-2^k+1}^{x-2^k+x}A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.509861em;vertical-align:-0.35804100000000005em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1518199999999998em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35804100000000005em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>为区间最小二次幂，即<code>lowbit(x)</code></p>
<blockquote>
<p>e.g. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>8</mn><msub><mo>)</mo><mn>10</mn></msub><mo>=</mo><mo>(</mo><mn>1000</mn><msub><mo>)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">(8)_{10} = (1000)_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">8</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo>(</mo><mn>8</mn><mo>)</mo><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">lowbit(8) = 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><br>
e.g. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>10</mn><msub><mo>)</mo><mn>10</mn></msub><mo>=</mo><mo>(</mo><mn>1010</mn><msub><mo>)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">(10)_{10} = (1010)_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo>(</mo><mn>10</mn><mo>)</mo><mo>=</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">lowbit(10) = 2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></p>
</blockquote>
</blockquote>
<blockquote>
<p>以区间的方式存储，可以方便的求和、维护（前缀和等）</p>
</blockquote>
<blockquote>
<p>lowbit的<strong>位运算</strong><br>
因为是求最小二次幂<br>
所以是<code>(~x+1)&amp;x</code>，即<code>(-x)&amp;x</code></p>
</blockquote>
<hr>
<h1 id="核心代码">核心代码</h1>
<pre><code class="language-cpp">//维护|构建
void build(int x)
{
    while(x &lt;= N)
    {
        c[x] += a[x];
        x += lowbit(x);
    }
}

//求和
int sum(int x)
{
    int res = 0;
    while(x &gt; 0)
    {
        res += c[x];
        x -= lowbit(x);
    }
    return res;
}

//求最小二次幂
int lowbit(int x)
{
    return (-x) &amp; x;
}
</code></pre>
<hr>
<h1 id="模版">模版</h1>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
#define Maxn 15000+10
#define Maxc 32000+10
using namespace std;
struct node{
	int x, y;
}p[Maxn];
int n, m = 32001;
int c[Maxc], ans[Maxc];
int lowbit(int);
void build(int, int);
int sum(int);
int main()
{
	scanf(&quot;%d&quot;, &amp;n);
	for(int i=1; i&lt;=n; ++i)
		scanf(&quot;%d%d&quot;, &amp;p[i].x, &amp;p[i].y);
	for(int i=1; i&lt;=n; ++i)
	{
		int u = p[i].x+1;  //树状数组无法维护下标0
		int w = sum(u);
		build(u, 1);
		++ans[w];
	}
	for(int i=0; i&lt;n; ++i)
		printf(&quot;%d\n&quot;, ans[i]);
	return 0;
}
int lowbit(int x)
{
	return (-x) &amp; x;
}
void build(int x, int y)
{
	while(x &lt;= m) //x范围不定，直接计算到最大
	{
		c[x] += y;
		x += lowbit(x);
	}
}
int sum(int x)
{
	int res = 0;
	while(x &gt; 0)
	{
		res += c[x];
		x -= lowbit(x);
	}
	return res;
}
</code></pre>
<p>题目<a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1536">传送门</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea静态博客使用CNAME以及相关配置]]></title>
        <id>https://diego3893.github.io/post/gridea-jing-tai-bo-ke-shi-yong-cname-yi-ji-xiang-guan-pei-zhi/</id>
        <link href="https://diego3893.github.io/post/gridea-jing-tai-bo-ke-shi-yong-cname-yi-ji-xiang-guan-pei-zhi/">
        </link>
        <updated>2020-03-05T00:14:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0-准备工作">0 准备工作</h1>
<p>注册域名使用<a href="https://cloud.tencent.com/">腾讯云</a><br>
加速以及https配置使用<a href="https://www.cloudflare.com/">cloudflare</a></p>
<hr>
<h1 id="1-注册域名">1 注册域名</h1>
<h2 id="11-注册">1.1 注册</h2>
<p>进入<a href="https://dnspod.cloud.tencent.com/">腾讯云</a>注册域名<br>
<s>购买过程不说，非常简单</s><br>
支付完成后，进入<a href="https://console.cloud.tencent.com/domain">管理页面</a></p>
<ul>
<li>如果<em>服务状态</em>显示未实名认证，请立即实名认证</li>
<li>认证完成后，<em>服务状态</em>会显示<strong>正常</strong></li>
<li></li>
<li>备案不管它</li>
</ul>
<h2 id="12-解析">1.2 解析</h2>
<p>进入<strong>解析</strong>页面<br>
<img src="https://s2.ax1x.com/2020/03/05/3Tawon.jpg" alt="CNAME" loading="lazy"><br>
添加两条解析记录，配置如图 <strong>（记录值为username.github.io，即博客地址）</strong></p>
<h2 id="13-cname绑定">1.3 CNAME绑定</h2>
<h3 id="131-github绑定">1.3.1 github绑定</h3>
<p>在<em>custom domain</em>中填入域名<br>
<img src="https://s2.ax1x.com/2020/03/05/3TdZYq.jpg" alt="N" loading="lazy"></p>
<h3 id="132-gridea绑定">1.3.2 Gridea绑定</h3>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/03/05/3TaHyD.jpg" alt="C" loading="lazy"></figure>
<hr>
<h1 id="2-在cloudflare中添加域名并启用cdn">2 在cloudflare中添加域名并启用CDN</h1>
<p>看这篇<a href="http://www.fangyuba.com/news/dynamic/197.htm">教程</a><br>
<strong>注</strong>：腾讯云修改DNS如下<br>
<img src="https://s2.ax1x.com/2020/03/05/3TUNU1.jpg" alt="DNS1" loading="lazy"><br>
<img src="https://s2.ax1x.com/2020/03/05/3TUtER.jpg" alt="DNS2" loading="lazy"></p>
<hr>
<h1 id="3-在cloudflare中配置https">3 在cloudflare中配置https</h1>
<h2 id="31-添加一条a记录">3.1 添加一条A记录</h2>
<p>在DNS目录下<br>
<img src="https://s2.ax1x.com/2020/03/05/3Tw02V.jpg" alt="settings" loading="lazy"><br>
确保是这两条（IPv4获取方式自行百度，cmd使用ping）</p>
<h2 id="32-打开https">3.2 打开https</h2>
<p>设置为Flexible<br>
<img src="https://s2.ax1x.com/2020/03/05/3Twbad.jpg" alt="F" loading="lazy"><br>
打开<em>always use https</em><br>
<img src="https://s2.ax1x.com/2020/03/05/3TwHVH.jpg" alt="U" loading="lazy"></p>
<h2 id="33-设置page-rules">3.3 设置Page Rules</h2>
<p><img src="https://s2.ax1x.com/2020/03/05/3T0ySP.jpg" alt="PR" loading="lazy"><br>
网址分别为<code>http://yourdomain/*</code>和<code>http://yourdomain/</code><br>
<img src="https://s2.ax1x.com/2020/03/05/3TBFmD.jpg" alt="P" loading="lazy"></p>
<hr>
<p>如果一切正常的话，应该会有以下：<br>
<img src="https://s2.ax1x.com/2020/03/05/3TDSEQ.jpg" alt="Active" loading="lazy"></p>
<p>有问题请在下方评论或发邮件询问我</p>
<blockquote>
<p>3013006997@qq.com</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图的存储]]></title>
        <id>https://diego3893.github.io/post/tu-de-cun-chu/</id>
        <link href="https://diego3893.github.io/post/tu-de-cun-chu/">
        </link>
        <updated>2020-03-01T13:33:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="邻接矩阵">邻接矩阵</h1>
<p><s>简单，不讲</s></p>
<blockquote>
<p><code>g[i][j]</code>表示从i到j的边权</p>
</blockquote>
<hr>
<h1 id="邻接表数组">邻接表（数组）</h1>
<blockquote>
<p>u, v, w记录边的信息<br>
first初始化-1，表示没有边<br>
first[u[i]]保存u[i]的第一条边编号，next[i]存储<em>编号为i的边</em>的下一条边的编号</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/03/01/32lNxe.jpg" alt="如图" loading="lazy"></figure>
<h2 id="模版">模版</h2>
<h3 id="无向图">无向图</h3>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#define N 100
using namespace std;
int main()
{
    int m;
    scanf(&quot;%d&quot;, &amp;m);
    int first[N*2], next[N*2];
    for(int i=0; i&lt;N; ++i)
    	first[i] = -1;
    int u[N*2], v[N*2], w[N*2];
    for(int i=1; i&lt;=m*2; i+=2)
    {
    	scanf(&quot;%d%d%d&quot;, &amp;u[i], &amp;v[i], &amp;w[i]);
    	u[i+1] = v[i];
    	v[i+1] = u[i];
    	w[i+1] = w[i];
    	next[i] = first[u[i]];
    	first[u[i]] = i;
    	next[i+1] = first[u[i+1]];
    	first[u[i+1]] = i+1;
	}
	int k;
	for(int i=1; i&lt;=m*2; ++i)
	{
		k = first[i];
		while(k != -1)
		{
			printf(&quot;%d %d %d\n&quot;, u[k], v[k], w[k]);
			k = next[k];
		}
	}	
    return 0;
}
</code></pre>
<h3 id="有向图">有向图</h3>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
using namespace std;
int main()
{
    int m, n;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    int first[n+1], next[m+1];
    for(int i=0; i&lt;N; ++i)
    	first[i] = -1;
    int u[m+1], v[m+1], w[m+1];
    for(int i=1; i&lt;=m; ++i)
    {
    	scanf(&quot;%d%d%d&quot;, &amp;u[i], &amp;v[i], &amp;w[i]);
    	next[i] = first[u[i]];
        first[u[i]] = i;
	}
	int k;
	for(int i=1; i&lt;=n; ++i)
	{
		k = first[i];
		while(k != -1)
		{
			printf(&quot;%d %d %d\n&quot;, u[k], v[k], w[k]);
			k = next[k];
		}
	}	
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最短路径]]></title>
        <id>https://diego3893.github.io/post/zui-duan-lu-jing/</id>
        <link href="https://diego3893.github.io/post/zui-duan-lu-jing/">
        </link>
        <updated>2020-03-01T12:47:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="floyd-warshall">Floyd-Warshall</h1>
<h2 id="原理">原理</h2>
<blockquote>
<p>分别枚举起始点i，中转点k，目标点j<br>
如果<code>e[i][k]+e[k][j] &lt; e[i][j]</code><br>
更新<code>e[i][j]</code>的值</p>
</blockquote>
<blockquote>
<p><mark>中转点</mark>枚举在最外层</p>
</blockquote>
<h2 id="模版">模版</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define N 100 
#define INF 0x7fffff
using namespace std;
int main()
{
	int g[N][N] = {};
	for(int i=0; i&lt;=N; ++i)
		for(int j=0; j&lt;=N; ++j)
			if(i != j)
				g[i][j] = INF;
			else
				g[i][j] = 0;
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	int u, v, w;
	for(int i=0; i&lt;m; ++i)
	{
		scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);
		g[u][v] = w;
	}
	for(int k=1; k&lt;=n; ++k)
		for(int i=1; i&lt;=n; ++i)
			for(int j=1; j&lt;=n; ++j)
				g[i][j] = min(g[i][j], g[i][k]+g[k][j]);
	printf(&quot;%d&quot;, g[1][n]);
	return 0;
}
</code></pre>
<hr>
<h1 id="dijkstra">Dijkstra</h1>
<h2 id="原理-2">原理</h2>
<p>假设起点为1号节点</p>
<blockquote>
<p>初始化1号节点的出边权值至dis数组（估计值）<br>
找当前dis中最小边权（确定值）（假设为2号节点）<br>
以2号节点的出边边权更新dis数组，若<code>e[2][i]+dis[2] &lt; dis[i]</code>，就更新<code>dis[i]</code><br>
以此类推，进行<strong>松弛</strong></p>
</blockquote>
<blockquote>
<p>每次找离源点最近的点，然后依次进行扩展<br>
用book数组进行标记是否使用</p>
</blockquote>
<h2 id="模版-2">模版</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define N 100
#define INF 0x7ffff
using namespace std;
int main()
{
	int e[N][N], dis[N], book[N];
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i=1; i&lt;=n; ++i)
		for(int j=1; j&lt;=n; ++j)
			if(i == j)
				e[i][j] = 0;
			else
				e[i][j] = INF;
	int u, v, w;
	for(int i=1; i&lt;=m; ++i)
	{
		scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);
		e[u][v] = w;
	}
	for(int i=1; i&lt;=n; ++i)
		dis[i] = e[1][i];
	memset(book, 0, sizeof(book));
	book[1] = 1;
	int minn = INF, k;
	for(int i=1; i&lt;=n; ++i)
	{
		minn = INF;
		for(int j=1; j&lt;=n; ++j)
			if(!book[j] &amp;&amp; dis[j]&lt;minn)
			{
				minn = dis[j];
				k = j;
			}
		book[k] = 1;
		for(int j=1; j&lt;=n; ++j)
			if(e[k][j]&lt;INF)
				dis[j] = min(dis[j], dis[k]+e[k][j]);
	}
	for(int i=1; i&lt;=n; ++i)
		printf(&quot;%d &quot;, dis[i]);
	return 0;
}

</code></pre>
<hr>
<h1 id="bellman-ford">Bellman-Ford</h1>
<h2 id="原理-3">原理</h2>
<blockquote>
<p>进行n-1轮松弛（详见Dijkstra）<br>
<s>没啥好说的</s></p>
</blockquote>
<h2 id="模版-3">模版</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define N 100
#define INF 0x7ffff
using namespace std;
int main()
{
	int dis[N], n, m, u[N], v[N], w[N];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i=1; i&lt;=m; ++i)
		scanf(&quot;%d%d%d&quot;, &amp;u[i], &amp;v[i], &amp;w[i]);
	for(int i=1; i&lt;=n; ++i)
		dis[i] = INF;
	dis[1] = 0;
	int check = 0;  //检查dis是否改变
	for(int i=1; i&lt;=n-1; ++i)
	{
		check = 0;
		for(int j=1; j&lt;=n; ++j)
			if(dis[v[j]] &gt; dis[u[j]]+w[j])
			{
				dis[v[j]] = dis[u[j]]+w[j];
				check = 1;
			}
		if(!check)  //优化
			break;
	}
	int flag = 0;
	for(int i=1; i&lt;=m; ++i)
		if(dis[v[i]] &gt; dis[u[i]]+w[i])
			flag = 1;
	if(flag)
		printf(&quot;有负权回路&quot;);
	else
		for(int i=1; i&lt;=n; ++i)
			printf(&quot;%d &quot;, dis[i]);
	return 0;
}
</code></pre>
<hr>
<h1 id="spfa">SPFA</h1>
<h2 id="原理-4">原理</h2>
<blockquote>
<p>用队列优化的Bellman-Ford<br>
思想差不多（Bellman-Ford+BFS）<br>
<em><strong>不用像BFS一样打标记（敲黑板）</strong></em></p>
</blockquote>
<p>不会邻接表的参考<a href="https://diego3893.github.io/post/tu-de-cun-chu/">我的这篇博文</a></p>
<h2 id="模版邻接表">模版（邻接表）</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define N 100
#define INF 0x7ffff

using namespace std;
int main()
{
	int n, m;
	int u[N], v[N], w[N];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	int first[n+1], next[m+1];
	int dis[N] = {}, book[N] = {}, que[N] = {}, head = 1, tail = 1;
	for(int i=1; i&lt;=n; ++i)
		dis[i] = INF;
	dis[1] = 0;
	for(int i=1; i&lt;=n; ++i)
		first[i] = -1;
	for(int i=1; i&lt;=m; ++i)
	{
		scanf(&quot;%d%d%d&quot;, &amp;u[i], &amp;v[i], &amp;w[i]);
		next[i] = first[u[i]];
		first[u[i]] = i;
	}
	que[tail++] = 1;
	book[1] = 1;
	int k;
	while(head &lt; tail)
	{
		k = first[que[head]];
		while(k != -1)
		{
			if(dis[v[k]] &gt; dis[u[k]]+w[k])
			{
				dis[v[k]] = dis[u[k]]+w[k];
				if(book[v[k]] == 0)
				{
					que[tail++] = v[k];
					book[v[k]] = 1;
				}
			}
			k = next[k];
		}
		book[que[head]] = 0;
		head++;
	}
	for(int i=1; i&lt;=n; ++i)
		printf(&quot;%d &quot;, dis[i]);
	return 0;
}

</code></pre>
<hr>
<h1 id="算法比较">算法比较</h1>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Floyd-Warshall</th>
<th style="text-align:center">Dijkstra</th>
<th style="text-align:center">Bellman-Ford</th>
<th style="text-align:center">SPFA</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">空间复杂度</td>
<td style="text-align:center">O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O(M)</td>
<td style="text-align:center">O(M)</td>
<td style="text-align:center">O(M)</td>
</tr>
<tr>
<td style="text-align:center">时间复杂度</td>
<td style="text-align:center">O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">N^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td style="text-align:center">O((M+N)logN)</td>
<td style="text-align:center">O(NM)</td>
<td style="text-align:center">最坏也是O(NM)</td>
</tr>
<tr>
<td style="text-align:center">适用情况</td>
<td style="text-align:center">稠密图，与顶点关系密切</td>
<td style="text-align:center">稠密图，与顶点关系密切</td>
<td style="text-align:center">稀疏图，与边关系密切</td>
<td style="text-align:center">稀疏图，与边关系密切</td>
</tr>
<tr>
<td style="text-align:center">负权</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">负权边</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">负权回路判定</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL合集]]></title>
        <id>https://diego3893.github.io/post/stl-he-ji/</id>
        <link href="https://diego3893.github.io/post/stl-he-ji/">
        </link>
        <updated>2020-02-29T14:09:51.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/02/29/3618js.png" alt="1" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://s2.ax1x.com/2020/02/29/361d4U.png" alt="2" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://s2.ax1x.com/2020/02/29/361YBq.png" alt="3" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://s2.ax1x.com/2020/02/29/361UEV.png" alt="4" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://s2.ax1x.com/2020/02/29/361aNT.png" alt="5" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://s2.ax1x.com/2020/02/29/361B34.png" alt="6" loading="lazy"></figure>
<p>也可以参考<a href="https://blog.csdn.net/shenaisi/article/details/81545418">这个</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[c++快读（数字）]]></title>
        <id>https://diego3893.github.io/post/ckuai-du-shu-zi/</id>
        <link href="https://diego3893.github.io/post/ckuai-du-shu-zi/">
        </link>
        <updated>2020-02-29T12:46:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="代码">代码</h1>
<pre><code class="language-cpp">inline int fread()
{
    int x=0,f=1;
    char ch=getchar();
    while(ch&lt;'0'||ch&gt;'9'){
        if(ch=='-')
            f=-1;
        ch=getchar();
    }
    while(ch&gt;='0'&amp;&amp;ch&lt;='9'){
        x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48);
        ch=getchar();
    }
    return x*f;
}
</code></pre>
<hr>
<h1 id="原理">原理</h1>
<blockquote>
<p>getchar()比scanf()快</p>
<p>f判断正负</p>
</blockquote>
<blockquote>
<p>重点在<code>x = (x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48)</code><br>
<code>x&lt;&lt;1</code>= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x*2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>， <code>x&lt;&lt;3</code>= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x*2*2*2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p>
<blockquote>
<p><code>(x&lt;&lt;1)+(x&lt;&lt;3) = x*10</code></p>
</blockquote>
<p>ch^48=ch-'0'</p>
</blockquote>
]]></content>
    </entry>
</feed>