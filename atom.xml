<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://diego3893.github.io</id>
    <title>Diego&apos;s Blog</title>
    <updated>2020-09-21T16:13:17.276Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://diego3893.github.io"/>
    <link rel="self" href="https://diego3893.github.io/atom.xml"/>
    <subtitle>Stay hungry, Stay foolish</subtitle>
    <logo>https://diego3893.github.io/images/avatar.png</logo>
    <icon>https://diego3893.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Diego&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[题解 P1135 【奇怪的电梯】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1135-qi-guai-de-dian-ti/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1135-qi-guai-de-dian-ti/">
        </link>
        <updated>2020-09-21T16:11:23.000Z</updated>
        <content type="html"><![CDATA[<p>典型的BFS题</p>
<h3 id="大体思路">大体思路</h3>
<p>把楼层抽象为一个一维数组，对应K值为行走步数，进行搜索</p>
<p><strong>注：蒟蒻使用数组模拟队列</strong></p>
<hr>
<p>上代码：     （<em>有注释</em> ）</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int head, tail; //头尾指针
struct lift{ 	//存储电梯楼层
    int book;	//标记
    int cnt;	//步数
    int k;	//K值
}l[201];
int a, b, n; 	//如题
int x;   	//临时数据存储
int map[1002];  //队列
int main()
{
    //freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);
    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;a, &amp;b);//不多说
    for(int i=1; i&lt;=n; ++i)
    {
        scanf(&quot;%d&quot;, &amp;l[i].k);
        l[i].cnt = 0, l[i].book = 0;//初始化
    }
    head = 0, tail = 0;
    l[a].book = 1, l[a].cnt = 0;
    map[head] = a, ++tail;	//初始点特殊处理
    while(head &lt; tail)	//若还能扩展
    {
        x = map[head] + l[map[head]].k; //扩展方式1
        if(x&gt;=1 &amp;&amp; x&lt;=n &amp;&amp; l[x].book == 0)  //在范围以内且未到过
        {
            map[tail++] = x; //入队
            l[x].book = 1; //打标记
            l[x].cnt = l[map[head]].cnt+1;//步数+1
        }
        if(x == b)//剪枝1
        {
            printf(&quot;%d&quot;, l[x].cnt);
            return 0;
        }
        x = map[head] - l[map[head]].k;//扩展方式2
        if(x&gt;=1 &amp;&amp; x&lt;=n &amp;&amp; l[x].book == 0)
        {
            map[tail++] = x;//同上
            l[x].book = 1;
            l[x].cnt = l[map[head]].cnt+1;
        }  
        if(x == b)//剪枝2
        {
            printf(&quot;%d&quot;, l[x].cnt);
            return 0;
        }
        ++head;//这个楼层扩展完毕，出队
    }
    if(l[b].book == 0)//若无法到达
        printf(&quot;-1&quot;);
    //fclose(stdin);
    return 0;
}
</code></pre>
<hr>
<p>若有不懂，可以和本蒟蒻一样，阅读《<strong>啊哈！算法</strong>》</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1164 【小A点菜】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1164-xiao-a-dian-cai/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1164-xiao-a-dian-cai/">
        </link>
        <updated>2020-09-21T16:10:35.000Z</updated>
        <content type="html"><![CDATA[<p>这是一道<s>很水的</s>dp题，但作为第一天学动态规划的蒟蒻还是提交了两遍/捂脸/</p>
<p>看到前面dalao全部用文字叙述，今天我想介绍一种推状态转移方程的方法————</p>
<h1 id="表格法">表格法</h1>
<p><img src="https://cdn.luogu.com.cn/upload/pic/72291.png" alt="直观的表格" loading="lazy"><br>
本人直接用的样例，方便对照</p>
<p>通过表格可以直观看出方程  <s>自认为小学找规律难度</s></p>
<p>具体数据表示啥我就不详细介绍了，应该都懂<br>
还是上一下代码吧：</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
using namespace std;
const int maxm = 10005, maxn = 105;  //数据范围
int cell[maxn][maxm], p[maxn];
int main()
{
	int m, n;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);  //看清输入顺序，我第一次就是把顺序搞反了
	for(int i=1; i&lt;=n; ++i)
		scanf(&quot;%d&quot;, &amp;p[i]);  //输入价格
	for(int i=1; i&lt;=n; ++i)    //从第一道菜开始（表格第一列）
		for(int j=1; j&lt;=m; ++j)   //从只剩一元钱开始直到符合输入的钱数（表格第一行）
		{
			if(j &lt; p[i])   //三个方程依次判断
				cell[i][j] = cell[i-1][j];
			if(j == p[i]) 
				cell[i][j] = cell[i-1][j]+1;
			if(j &gt; p[i]) 
				cell[i][j] = cell[i-1][j]+cell[i-1][j-p[i]];
		}
	printf(&quot;%d&quot;, cell[n][m]);  //由上表可得：右下角的数即为正解
	return 0;  //愉快的结束
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1765 【手机_NOI导刊2010普及（10）】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1765-shou-ji-_noi-dao-kan-2010-pu-ji-10/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1765-shou-ji-_noi-dao-kan-2010-pu-ji-10/">
        </link>
        <updated>2020-09-21T16:09:56.000Z</updated>
        <content type="html"><![CDATA[<p>这道题<s>其实很水</s>，用一个整形数组存放每个字母的按键次数即可<br>
附代码：</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int l[26] = {1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3,4, 1,2,3, 1,2,3,4};  //按键次数
int main()
{
    char c[200];
    while(gets(c))  //读入若干行句子（不要用scanf(&quot;%s&quot;, c)；和cin&gt;&gt;c;读到空格就要停
    {
        int ans = 0;  //按键次数总和
        for(int i=0; i&lt;strlen(c); ++i)  //遍历
        {
            if(c[i]&lt;='z' &amp;&amp; c[i]&gt;='a')  //如果是字母
                ans += l[c[i]-'a'];   //加上对应次数
            else if(c[i] == ' ')  //如果是空格
                ++ans; //加一次
        }
        printf(&quot;%d\n&quot;, ans);  //输出
    }
    return 0;  //愉快的结束
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4414 【[COCI2006-2007#2] ABC】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p4414-coci2006-20072-abc/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p4414-coci2006-20072-abc/">
        </link>
        <updated>2020-09-21T16:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>用简化的桶排序，再用if判断输出就行<br>
附AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
    int a, b, c, n[3], j = 0;//n为排序用数组，j为排序时下标
    char s[3];//s为输出顺序
    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;//输入数据
    cin&gt;&gt;s;
    for(int i=1; i&lt;=100; ++i)//循环排序【排序】
    {
        if(i == a)//如果是a，就把它放在第一位（最小）
        {
            n[j] = a;
            ++j;
            continue;
        }
        if(i == b)//同上
        {
            n[j] = b;
            ++j;
            continue;
        }
        if(i == c)//同上
        {
            n[j] = c;
            ++j;
            continue;
        }
        if(j ==3)//如果三个数顺序已经排好，退出循环
            break;
    }
    for(int i=0; i&lt;3; ++i)//选择输出【输出】
    {
        if(s[i] == 'A')//检查顺序
            cout&lt;&lt;n[0];
        if(s[i] == 'B')
            cout&lt;&lt;n[1];
        if(s[i] == 'C')
            cout&lt;&lt;n[2];
        cout&lt;&lt;' ';
    }
    return 0;//结束程序
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1059 【明明的随机数】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1059-ming-ming-de-sui-ji-shu/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1059-ming-ming-de-sui-ji-shu/">
        </link>
        <updated>2020-09-21T16:08:28.000Z</updated>
        <content type="html"><![CDATA[<p>看到去重+排序（数据范围不是很大）直接用桶排序<br>
上AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
bool number[1000]; //1000个“桶”
int main()
{
    int N, sum = 0, s;
    cin&gt;&gt;N;
    for(int i = 1; i&lt;=N; ++i)
    {
        cin&gt;&gt;s;//读入数据
        if(!number[s])//如果这个数没有出现过
        {
            number[s] = 1;//标记为出现
            ++sum;//计数器+1
        }
    }
    cout&lt;&lt;sum&lt;&lt;endl;//输出不相同的数的个数
    for(int i=0; i&lt;1000; ++i)//遍历数组
        if(number[i])//如果出现过就输出
            cout&lt;&lt;i&lt;&lt;' ';
    return 0;//结束程序
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1150 【Peter的烟】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1150-peter-de-yan/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1150-peter-de-yan/">
        </link>
        <updated>2020-09-21T16:07:52.000Z</updated>
        <content type="html"><![CDATA[<p>直接上AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
    int n, k, x = 1, sum = 0;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);//输入
    sum += n;//本来拥有的烟
    while(x&gt;0)
    {
        x = n/k;//可以换x根
        n = n-x*k+x;//剩下的烟蒂
        sum += x;//加上换来的烟
    }
    cout&lt;&lt;sum;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P3742  【umi的函数】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p3742-umi-de-han-shu/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p3742-umi-de-han-shu/">
        </link>
        <updated>2020-09-21T16:06:43.000Z</updated>
        <content type="html"><![CDATA[<p>AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
char s[100],s1[100],s2[100];//s为y,s1为x,s2为z
int n;
int main()
{
    cin&gt;&gt;n;
    for(int i=0;i&lt;n;i++)//输入
        cin&gt;&gt;s1[i];
    for(int i=0;i&lt;n;i++)
        cin&gt;&gt;s2[i];
    for(int i=0;i&lt;n;i++)
    {
        if(s1[i]&lt;s2[i])//判断是否存在
        {
            cout&lt;&lt;&quot;-1&quot;;
            return 0;
        }
    }
    for(int i=0;i&lt;n;i++)
    {
        if(s1[i]==s2[i])
        {
            s[i]='z';//保证大于等于s1[i]
        }
        else s[i]=s2[i];
    }
    puts(s);//输出
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单链表实现----学生成绩查询系统]]></title>
        <id>https://diego3893.github.io/post/dan-lian-biao-shi-xian-xue-sheng-cheng-ji-cha-xun-xi-tong/</id>
        <link href="https://diego3893.github.io/post/dan-lian-biao-shi-xian-xue-sheng-cheng-ji-cha-xun-xi-tong/">
        </link>
        <updated>2020-09-21T16:04:46.000Z</updated>
        <content type="html"><![CDATA[<p>代码注释较少，若给各位的阅读带来不便，请谅解<br>
本人蒟蒻一枚，写得也是很不容易了，请多多鼓励</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
void run(); //运行 
void menu();//菜单 
void Read();//读入 
void Put();//全部输出 
void Find();//查询 
void Insert();//添加 
void Delete(); //删除 
void Len();//输出长度 
void Save();//保存 
void Empty();//清空 
int Lenth();//求长度 
void readData();//提取数据 
void Data();//读取数据 
struct node{
    int number;
    char name[20];
    int ch;
    int ma;
    int en;
    int to = 0;
    double av;
    node *next;
}*head, *p, *r, a; 
int choose, member;
bool f = 1, flag;
int main()
{
    head = new node;
    r = head;
    system(&quot;color 74&quot;);
    cout&lt;&lt;&quot;欢迎使用成绩查询系统\nMADE BY DIEGO\n&quot;;
    system(&quot;pause&quot;);
    system(&quot;cls&quot;);
    Data();
    system(&quot;cls&quot;);
    while(f)
    {
        system(&quot;color f1&quot;);
        run();
    }
    return 0;
}
void run()
{
    menu();
    system(&quot;cls&quot;);
    return;
}
void menu()
{
    cout&lt;&lt;setw(50)&lt;&lt;&quot;MENU\n&quot;;
    cout&lt;&lt;&quot;1：录入； 2：查询； 3：添加； 4：删除； 5：清空； 6：显示所有； 7：学生人数  8：保存并退出\n&quot;;
    cout&lt;&lt;&quot;请输入您的选择：&quot;;
    scanf(&quot;%d&quot;, &amp;choose);
    switch(choose)
    {
        case 1:Read();break;
        case 2:Find();break;
        case 3:Insert();break;
        case 4:Delete();break;
        case 5:Empty();break;
        case 6:Put();break;
        case 7:Len();break; 
        case 8:Save();break; 
    }
    return;
}
void Read()
{
    system(&quot;color f2&quot;);
    cout&lt;&lt;&quot;请输入人数：&quot;;
    scanf(&quot;%d&quot;, &amp;member);
    cout&lt;&lt;&quot;输入顺序为：学号 姓名(长度不超过20) 语文分数 数学分数 英语分数\n&quot;; 
    for(int i=1; i&lt;=member; ++i)
    {
        scanf(&quot;%d%s%d%d%d&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en);
        p = new node;
        p-&gt;number = a.number;
        strcpy(p-&gt;name, a.name);
        p-&gt;ch = a.ch;
        p-&gt;ma = a.ma;
        p-&gt;en = a.en;
        p-&gt;to = a.ch+a.en+a.ma;
        p-&gt;av = p-&gt;to/3.0;
        p-&gt;next = NULL;
        r-&gt;next = p;
        r = p;
    }
    cout&lt;&lt;&quot;录入完成\n\n&quot;;
    system(&quot;pause&quot;); 
    return;
}
void Len()
{
    system(&quot;color f3&quot;);
    cout&lt;&lt;&quot;学生人数为：&quot;;
    int n = 0;
    node *s = head;
    while(s != NULL)
    {
        ++n;
        s = s-&gt;next;
    }
    cout&lt;&lt;n-1&lt;&lt;endl&lt;&lt;endl;
    system(&quot;pause&quot;); 
    return;
}
void Delete()
{
    int g; 
    system(&quot;color f5&quot;);
    cout&lt;&lt;&quot;请输入删除结点编号：&quot;;
    scanf(&quot;%d&quot;, &amp;g);
    node *x, *s;
    x = head;
    int j = 0;
    while(x-&gt;next!=NULL &amp;&amp; j&lt;g-1)
    {
        x = x-&gt;next;
        ++j;
    }
    if(x-&gt;next == NULL)
        printf(&quot;cannot find this one&quot;);
    else
    {
        s = x-&gt;next;
        x-&gt;next = s-&gt;next;
        free(s);
        cout&lt;&lt;&quot;删除成功\n\n&quot;;
    }
    system(&quot;pause&quot;);
    return;
}
void Insert()
{
    int d;
    system(&quot;color f6&quot;);
    cout&lt;&lt;&quot;请输入需添加的后一个结点位置：&quot;;
    scanf(&quot;%d&quot;, &amp;d);
    cout&lt;&lt;&quot;请输入数据（格式同录入数据）：&quot;;
    node *x, *s;
    x = head;
    int j = 0;
    while(x!=NULL &amp;&amp; j&lt;d-1)
    {
        x = x-&gt;next;
        ++j;
    }
    if(x == NULL)
        printf(&quot;cannot find this one&quot;);
    else
    {
        s = new node;
        scanf(&quot;%d%s%d%d%d&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en);
        s-&gt;number = a.number;
        strcpy(s-&gt;name, a.name);
        s-&gt;ch = a.ch;
        s-&gt;ma = a.ma;
        s-&gt;en = a.en;
        s-&gt;to = a.ch+a.en+a.ma;
        s-&gt;av = s-&gt;to/3.0;
        s-&gt;next = x-&gt;next;
        x-&gt;next = s;
        cout&lt;&lt;&quot;添加成功\n\n&quot;; 
    }
    system(&quot;pause&quot;);
    return;
}
void Put()
{
    system(&quot;color f9&quot;);
    if(Lenth() == 0)
    {
        cout&lt;&lt;&quot;无数据\n\n&quot;;
        system(&quot;pause&quot;);
        return;
    }
    cout&lt;&lt;&quot;输出顺序为：学号 姓名 语文分数 数学分数 英语分数 总分 平均分\n&quot;;
    p = head-&gt;next;
    while(p-&gt;next != NULL)
    {
        printf(&quot;%d &quot;, p-&gt;number);
        cout&lt;&lt;p-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
        p = p-&gt;next;
    }
    printf(&quot;%d &quot;, p-&gt;number);
    cout&lt;&lt;p-&gt;name;
    printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
    cout&lt;&lt;&quot;\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void Find()
{
    int pi;
    system(&quot;color f8&quot;);
    cout&lt;&lt;&quot;请输入结点位置：&quot;;
    scanf(&quot;%d&quot;, &amp;pi);
    node *s = head-&gt;next;
    int j = 1;
    while(s!=NULL &amp;&amp; j&lt;pi)
    {
        s = s-&gt;next;
        ++j;
    }
    if(s!=NULL &amp;&amp; j==pi)
    {
        printf(&quot;%d &quot;, s-&gt;number);
        cout&lt;&lt;s-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, s-&gt;ch, s-&gt;ma, s-&gt;en, s-&gt;to, s-&gt;av);
    }
    else
        cout&lt;&lt;&quot;cannot find this one&quot;;
    cout&lt;&lt;&quot;\n\n&quot;;
    system(&quot;pause&quot;);
    return;
}
int Lenth()
{
    int n = 0;
    node *s = head;
    while(s != NULL)
    {
        ++n;
        s = s-&gt;next;
    }
    return n-1;
}
void Empty()
{
    system(&quot;color f5&quot;);
    node *x, *s;
    x = head;
    while(x-&gt;next!=NULL)
    {
        s = x-&gt;next;
        x-&gt;next = s-&gt;next;
        free(s);
    }
    free(x);
    cout&lt;&lt;&quot;系统已清空\n\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void Save()
{
    system(&quot;color 7C&quot;);
    freopen(&quot;score.txt&quot;, &quot;w&quot;, stdout);
    printf(&quot;%d\n&quot;, Lenth());
    p = head-&gt;next;
    while(p-&gt;next != NULL)
    {
        printf(&quot;%d &quot;, p-&gt;number);
        cout&lt;&lt;p-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
        p = p-&gt;next;
    }
    printf(&quot;%d &quot;, p-&gt;number);
    cout&lt;&lt;p-&gt;name;
    printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
    fclose(stdout);
    freopen(&quot;CON&quot;, &quot;w&quot;, stdout);
    cout&lt;&lt;&quot;保存成功\n\n蒟蒻代码，感谢使用\n&quot;;
    f = 0;
    return;
}
void Data()
{
    system(&quot;color 70&quot;);
    cout&lt;&lt;&quot;是否读取数据?(1 是,0 否):&quot;;
    cin&gt;&gt;flag;
    if(flag)
    {
        readData();
        cout&lt;&lt;&quot;读取成功\n&quot;;
    }
    else
        cout&lt;&lt;&quot;未读取数据\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void readData()
{
    freopen(&quot;score.txt&quot;, &quot;r&quot;, stdin);
    scanf(&quot;%d&quot;, &amp;member);
    for(int i=1; i&lt;=member; ++i)
    {
        scanf(&quot;%d%s%d%d%d%d%f&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en, &amp;a.to, &amp;a.av);
        p = new node;
        p-&gt;number = a.number;
        strcpy(p-&gt;name, a.name);
        p-&gt;ch = a.ch;
        p-&gt;ma = a.ma;
        p-&gt;en = a.en;
        p-&gt;to = a.to;
        p-&gt;av = a.av;
        p-&gt;next = NULL;
        r-&gt;next = p;
        r = p;
    }
    fclose(stdin);
    freopen(&quot;CON&quot;, &quot;r&quot;, stdin);
    return;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[deepin安装Lemon]]></title>
        <id>https://diego3893.github.io/post/deepin-an-zhuang-lemon/</id>
        <link href="https://diego3893.github.io/post/deepin-an-zhuang-lemon/">
        </link>
        <updated>2020-09-19T09:59:50.000Z</updated>
        <summary type="html"><![CDATA[<p>测评机乃OI之神器也！于Linux安装之实属重要！</p>
]]></summary>
        <content type="html"><![CDATA[<p>测评机乃OI之神器也！于Linux安装之实属重要！</p>
<!--more-->
<h1 id="下载资源">下载资源</h1>
<p>原项目：<br>
<gb user="iotang" type="star" count="1" size="1" width="200">Project_LemonLime</gb><br>
也可以在码云下载：<br>
<code>https://gitee.com/oierzcx/Project_LemonLime</code></p>
<hr>
<h1 id="本教程有视频">本教程有视频</h1>
<p>本人<s>辛苦录制11分钟的</s>教学视频：<br>
<code>https://www.bilibili.com/video/BV1ei4y1t7yR</code></p>
<h1 id="安装">安装</h1>
<h2 id="安装依赖">安装依赖</h2>
<pre><code class="language-shell">sudo apt install qt5-default build-essential
sudo apt install git
sudo apt install g++
</code></pre>
<h2 id="编译">编译</h2>
<pre><code class="language-shell">cd 源码目录
g++ watcher_unix.cpp -o watcher_unix -O2
qmake lemon.pro
make
</code></pre>
<h2 id="似乎可装可不装">似乎可装可不装</h2>
<pre><code class="language-shell">sudo apt install qtcreator
</code></pre>
<h2 id="设置全局开启">设置全局开启</h2>
<pre><code class="language-shell">cd 源码目录
sudo cp lemon /usr/bin
</code></pre>
<h1 id="效果">效果</h1>
<figure data-type="image" tabindex="1"><img src="http://blog.diego.plus:2000/usr/uploads/2020/05/2417492455.png" alt="Snipaste_2020-05-01_20-10-49.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deepin美化笔记]]></title>
        <id>https://diego3893.github.io/post/deepin-mei-hua-bi-ji/</id>
        <link href="https://diego3893.github.io/post/deepin-mei-hua-bi-ji/">
        </link>
        <updated>2020-09-19T09:59:16.000Z</updated>
        <summary type="html"><![CDATA[<p>deepin已经很好看了，但还可以美化！<br>
Conky参上！</p>
]]></summary>
        <content type="html"><![CDATA[<p>deepin已经很好看了，但还可以美化！<br>
Conky参上！</p>
<!--more-->
<hr>
<h1 id="安装conky">安装Conky</h1>
<ul>
<li>安装Conky组件</li>
</ul>
<pre><code class="language-sh">sudo apt-get install conky-all
</code></pre>
<ul>
<li>安装Conky管理器</li>
</ul>
<pre><code class="language-bash">wget --no-check-certificate https://github.com/teejee2008/conky-manager/releases/download/v2.4/conky-manager-v2.4-amd64.run
</code></pre>
<p>或者在这里下载<a href="http://blog.diego.plus:2000/usr/uploads/2020/04/1960381472.run">conky-manager-v2.4-amd64.run</a>，重命名为<code>conky-manager-v2.4-amd64.run</code><br>
- 给予权限</p>
<pre><code class="language-sh">chmod +x ./conky-manager-v2.4-amd64.run
</code></pre>
<pre><code>- 安装
</code></pre>
<pre><code class="language-shell">sudo ./conky-manager-v2.4-amd64.run
</code></pre>
<h1 id="创建组件">创建组件</h1>
<p>到<code>.conky</code>目录下，新建组件文件</p>
<pre><code class="language-shell">cd ~/.conky
sudo touch deepin_conky
sudo deepin-editor deepin_conky
</code></pre>
<p>设置组件，将以下内容复制到deepin_conky中并保存</p>
<pre><code>default_color white
double_buffer yes
no_buffers yes
update_interval 1.0
total_run_times 0
own_window yes
own_window_type normal
own_window_transparent yes
own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager
 
own_window_colour 000000
own_window_argb_visual yes
own_window_argb_value 0
 
double_buffer yes
draw_shades yes
draw_outline no
draw_borders no
draw_graph_borders n0
minimum_size 300 1
maximum_width 406
default_color ffffff
default_shade_color 000000
default_outline_color 000000
alignment top_right
gap_x 6
gap_y 5
cpu_avg_samples 2
override_utf8_locale no
uppercase no # set to yes if you want all text to be in uppercase
use_spacer no
use_xft yes
xftfont WenQuanYi Zen Hei:pixelsize=12
override_utf8_locale yes
use_spacer no
minimum_size 300 1
TEXT
${font LCD:style=Bold:pixelsize=40}${alignc}${time %I:%M:%S}
${font LCD:style=Bold:pixelsize=20}${time %Y年%b%d日 星期%a}${alignc}
${font WenQuanYi Zen Hei:pixelsize=14}
 
${color #98c2c7}姓名:  ${color}$alignr Diego
${color #98c2c7}邮箱:  ${color}$alignr 3013006997@qq.com
${color #98c2c7}内核:  ${color}$alignr$kernel
${color #98c2c7}已开机: ${color}$alignr$uptime
 
 
${color #98c2c7}CPU使用率: ${color}$cpu%
 
$cpubar
 
 CPU1 温度:  $alignr${exec sensors | grep 'Core 0' | cut -c17-25}
 CPU2 温度: $alignr${exec sensors | grep 'Core 1' | cut -c17-25}
 
${color #98c2c7}CPU占用:${color}
 
 ${top name 1} ${alignr}${top cpu 1} 
 ${top name 2} ${alignr}${top cpu 2} 
 ${top name 3} ${alignr}${top cpu 3} 
 ${top name 4} ${alignr}${top cpu 4} 
 ${top name 5} ${alignr}${top cpu 5} 
 ${top name 6} ${alignr}${top cpu 6} 
 
${color #98c2c7}物理内存：${color}${alignr}$mem / $memmax
 
${membar}
 
${color #98c2c7}根分区: ${color}${alignr}${fs_free /} / ${fs_size /}
 
${fs_bar 4 /}
 
${color #98c2c7}Home分区: ${color}${alignr}${fs_free /home} / ${fs_size /home}
 
${fs_bar 4 /home}
 
${color #98c2c7}网络使用:${color}
 
下载速度:$alignr${downspeed wlp3s0} k/s
上传速度:$alignr${upspeed wlp3s0} k/s
${downspeedgraph wlp3s0 324D23 77B753}
</code></pre>
<p>在管理器勾选即可<br>
<img src="http://blog.diego.plus:2000/usr/uploads/2020/04/3796045765.png" alt="截图录屏_conky-manager_20200429221826.png" loading="lazy"></p>
<h1 id="设置开机自启">设置开机自启</h1>
<p><img src="http://blog.diego.plus:2000/usr/uploads/2020/04/1855242712.png" alt="截图录屏_conky-manager_20200430231012.png" loading="lazy"><br>
<img src="http://blog.diego.plus:2000/usr/uploads/2020/04/61264178.png" alt="截图录屏_conky-manager_20200430231027.png" loading="lazy"><br>
打开第一个选项即可</p>
<h1 id="为什么这么麻烦">为什么这么麻烦？</h1>
<p>Conky原生的组件对deepin并不友好，所以……</p>
<h1 id="问题修复">问题修复</h1>
<p>如果<strong>CPU温度</strong>无法显示<br>
请安装一个东西：</p>
<pre><code class="language-shell">sudo apt-get install lm-sensors
</code></pre>
]]></content>
    </entry>
</feed>