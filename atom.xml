<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://diego3893.github.io</id>
    <title>Diego&apos;s Blog</title>
    <updated>2020-09-26T16:09:04.430Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://diego3893.github.io"/>
    <link rel="self" href="https://diego3893.github.io/atom.xml"/>
    <subtitle>Stay hungry, Stay foolish</subtitle>
    <logo>https://diego3893.github.io/images/avatar.png</logo>
    <icon>https://diego3893.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Diego&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[QduOJ安装指南]]></title>
        <id>https://diego3893.github.io/post/qduoj-an-zhuang-zhi-nan/</id>
        <link href="https://diego3893.github.io/post/qduoj-an-zhuang-zhi-nan/">
        </link>
        <updated>2020-09-26T15:57:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-安装环境">1 安装环境</h2>
<ul>
<li>Ubuntu20.04Server</li>
<li>本校服务器</li>
</ul>
<hr>
<h2 id="2-前置加速">2 前置加速</h2>
<h3 id="21-更换apt源">2.1 更换apt源</h3>
<p><strong><code>p.s.</code> vi/vim进入Insert模式开始编辑：<code>i</code>，退出Insert模式进入Normal模式：<code>Esc</code>，Normal模式下保存并退出：<code>:wq</code></strong></p>
<pre><code class="language-shell">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # 备份源文件
sudo vi /etc/apt/sources.list  # 编辑apt源的列表文件
</code></pre>
<p>把文件内容全部删除后输入以下内容：</p>
<pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal universe
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates universe
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security universe
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security multiverse
</code></pre>
<p>保存退出后输入：</p>
<pre><code class="language-shell">sudo apt update  # 更新源列表
sudo apt upgrade # 更新系统
sudo apt install vim # 安装vim
</code></pre>
<h3 id="22-加速pip">2.2 加速pip</h3>
<pre><code class="language-shell">cd # 回到~目录
mkdir .pip &amp;&amp;　cd .pip # 创建.pip文件夹并进入其子目录
vim pip.conf # 新建文件pip.conf并编辑
</code></pre>
<p>进入<code>Insert</code>模式输入以下：</p>
<pre><code>[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p><code>:wq</code>保存退出</p>
<h3 id="23-加速docker">2.3 加速docker</h3>
<pre><code class="language-shell">sudo vim /etc/docker/daemon.json
</code></pre>
<p>输入以下：</p>
<pre><code class="language-json">{
  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]
}
</code></pre>
<p>保存并退出</p>
<h3 id="24-修改hosts以加速github可选">2.4 修改hosts以加速github（可选）</h3>
<pre><code class="language-shell">sudo vim /etc/hosts
</code></pre>
<p>输入以下：</p>
<pre><code>151.101.72.249 github.global.ssl.fastly.net  
192.30.253.112 github.com
</code></pre>
<p>保存并退出</p>
<hr>
<h2 id="3-开始安装">3 开始安装</h2>
<h3 id="31-设置root用户">3.1 设置<code>root</code>用户</h3>
<pre><code class="language-shell"># 确认是否有root用户
su  # 切换至root
# 如果提示密码不对或无用户，进行以下，否则略过之
sudo passwd root  # 创建root，接下来自己设定密码

# 设置完成后
su # 进入root，接下来请始终保持在root中
</code></pre>
<h3 id="32-安装依赖">3.2 安装依赖</h3>
<pre><code class="language-shell">apt-get update &amp;&amp; sudo apt-get install -y vim python3-pip curl git
pip3 install --upgrade pip
pip install docker-compose
</code></pre>
<h3 id="33-安装docker">3.3 安装docker</h3>
<p>国内请使用：<code>sudo curl -sSL https://get.daocloud.io/docker | sh</code></p>
<p>国外请使用：<code>sudo curl -sSL get.docker.com | sh</code></p>
<p>附上docker官方文档：<a href="https://docs.docker.com/get-docker/">传送门</a></p>
<p><strong><code>p.s.</code> 此处可能耗时较长</strong></p>
<h3 id="34-部署oj">3.4 部署OJ</h3>
<pre><code class="language-shell">cd /home # 回到~目录
git clone -b 2.0 https://github.com/Harry-zklcdc/OnlineJudgeDeploy.git &amp;&amp; cd OnlineJudgeDeploy # 克隆项目
docker-compose up -d # 部署项目
</code></pre>
<h3 id="35-检查部署是否成功">3.5 检查部署是否成功</h3>
<pre><code class="language-shell">docker ps -a 
</code></pre>
<p>当看到所有的容器的状态没有 <code>unhealthy</code> 或 <code>Exited (x) xxx</code> 就代表 OJ 已经启动成功</p>
<h3 id="36-oj登入设置">3.6 OJ登入设置</h3>
<p><strong>初始用户</strong>：<code>root</code></p>
<p><strong>密码</strong>：<code>rootroot</code></p>
<hr>
<h2 id="4-修改美化">4 修改&amp;美化</h2>
<h3 id="41-修改端口">4.1 修改端口</h3>
<p>修改<code>/home/OnlineJudgeDeploy/</code>中的<code>docker-compose.yml</code></p>
<p>在<code>ports</code>关键词下，大约<code>85</code>行左右</p>
<pre><code class="language-dockerfile"># 原配置
    ports:
      - &quot;0.0.0.0:80:8000&quot;  # http
      - &quot;0.0.0.0:443:1443&quot; # https
# 更改后
    ports:
      - &quot;0.0.0.0:81:8000&quot;
      - &quot;0.0.0.0:443:1443&quot;
</code></pre>
<p>然后再次</p>
<pre><code class="language-shell">su
docker-compose up -d
</code></pre>
<p>即可</p>
<h3 id="42-使用看板娘可选">4.2 使用看板娘（可选）</h3>
<pre><code class="language-shell">cd /home/OnlineJudgeDeploy/data/forum/api/live2d/model/
git clone https://gitee.com/zklcdc/live2d_models.git &amp;&amp; cd live2d_models # 克隆模型到本地
cp -r * ../ # 将所有文件复制到上级文件夹
cd ../ &amp;&amp; cp model_list.json ../ # 把列表文件复制到live2d文件夹中
</code></pre>
<p>打开网页，<code>just enjoy</code></p>
<h3 id="43-修改网页icon">4.3 修改网页icon</h3>
<p>在<code>/home/OnlineJudgeDeploy/data/backend/public/website/</code>中，用自己的图片替换<code>favicon.ico</code>即可</p>
<h3 id="44-修改默认头像">4.4 修改默认头像</h3>
<p>在<code>/home/OnlineJudgeDeploy/data/backend/public/avatar/</code>中，用自己的图片替换<code>default.png</code>即可</p>
<hr>
<h2 id="5-参考项目">5 参考项目</h2>
<ul>
<li><a href="https://github.com/Harry-zklcdc/OnlineJudgeDeploy">Harry-zklcdc/OnlineJudgeDeploy</a></li>
<li><a href="https://github.com/QingdaoU/OnlineJudgeDeploy">QingdaoU/OnlineJudgeDeploy</a></li>
<li><a href="https://docs.onlinejudge.me/#/">QduOJ用户文档</a></li>
<li><a href="https://yzoj.tk/">山东省桓台第一中学OJ</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1135 【奇怪的电梯】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1135-qi-guai-de-dian-ti/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1135-qi-guai-de-dian-ti/">
        </link>
        <updated>2020-09-21T16:11:23.000Z</updated>
        <content type="html"><![CDATA[<p>典型的BFS题</p>
<h3 id="大体思路">大体思路</h3>
<p>把楼层抽象为一个一维数组，对应K值为行走步数，进行搜索</p>
<p><strong>注：蒟蒻使用数组模拟队列</strong></p>
<hr>
<p>上代码：     （<em>有注释</em> ）</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int head, tail; //头尾指针
struct lift{ 	//存储电梯楼层
    int book;	//标记
    int cnt;	//步数
    int k;	//K值
}l[201];
int a, b, n; 	//如题
int x;   	//临时数据存储
int map[1002];  //队列
int main()
{
    //freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);
    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;a, &amp;b);//不多说
    for(int i=1; i&lt;=n; ++i)
    {
        scanf(&quot;%d&quot;, &amp;l[i].k);
        l[i].cnt = 0, l[i].book = 0;//初始化
    }
    head = 0, tail = 0;
    l[a].book = 1, l[a].cnt = 0;
    map[head] = a, ++tail;	//初始点特殊处理
    while(head &lt; tail)	//若还能扩展
    {
        x = map[head] + l[map[head]].k; //扩展方式1
        if(x&gt;=1 &amp;&amp; x&lt;=n &amp;&amp; l[x].book == 0)  //在范围以内且未到过
        {
            map[tail++] = x; //入队
            l[x].book = 1; //打标记
            l[x].cnt = l[map[head]].cnt+1;//步数+1
        }
        if(x == b)//剪枝1
        {
            printf(&quot;%d&quot;, l[x].cnt);
            return 0;
        }
        x = map[head] - l[map[head]].k;//扩展方式2
        if(x&gt;=1 &amp;&amp; x&lt;=n &amp;&amp; l[x].book == 0)
        {
            map[tail++] = x;//同上
            l[x].book = 1;
            l[x].cnt = l[map[head]].cnt+1;
        }  
        if(x == b)//剪枝2
        {
            printf(&quot;%d&quot;, l[x].cnt);
            return 0;
        }
        ++head;//这个楼层扩展完毕，出队
    }
    if(l[b].book == 0)//若无法到达
        printf(&quot;-1&quot;);
    //fclose(stdin);
    return 0;
}
</code></pre>
<hr>
<p>若有不懂，可以和本蒟蒻一样，阅读《<strong>啊哈！算法</strong>》</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1164 【小A点菜】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1164-xiao-a-dian-cai/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1164-xiao-a-dian-cai/">
        </link>
        <updated>2020-09-21T16:10:35.000Z</updated>
        <content type="html"><![CDATA[<p>这是一道<s>很水的</s>dp题，但作为第一天学动态规划的蒟蒻还是提交了两遍/捂脸/</p>
<p>看到前面dalao全部用文字叙述，今天我想介绍一种推状态转移方程的方法————</p>
<h1 id="表格法">表格法</h1>
<p><img src="https://cdn.luogu.com.cn/upload/pic/72291.png" alt="直观的表格" loading="lazy"><br>
本人直接用的样例，方便对照</p>
<p>通过表格可以直观看出方程  <s>自认为小学找规律难度</s></p>
<p>具体数据表示啥我就不详细介绍了，应该都懂<br>
还是上一下代码吧：</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
using namespace std;
const int maxm = 10005, maxn = 105;  //数据范围
int cell[maxn][maxm], p[maxn];
int main()
{
	int m, n;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);  //看清输入顺序，我第一次就是把顺序搞反了
	for(int i=1; i&lt;=n; ++i)
		scanf(&quot;%d&quot;, &amp;p[i]);  //输入价格
	for(int i=1; i&lt;=n; ++i)    //从第一道菜开始（表格第一列）
		for(int j=1; j&lt;=m; ++j)   //从只剩一元钱开始直到符合输入的钱数（表格第一行）
		{
			if(j &lt; p[i])   //三个方程依次判断
				cell[i][j] = cell[i-1][j];
			if(j == p[i]) 
				cell[i][j] = cell[i-1][j]+1;
			if(j &gt; p[i]) 
				cell[i][j] = cell[i-1][j]+cell[i-1][j-p[i]];
		}
	printf(&quot;%d&quot;, cell[n][m]);  //由上表可得：右下角的数即为正解
	return 0;  //愉快的结束
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1765 【手机_NOI导刊2010普及（10）】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1765-shou-ji-_noi-dao-kan-2010-pu-ji-10/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1765-shou-ji-_noi-dao-kan-2010-pu-ji-10/">
        </link>
        <updated>2020-09-21T16:09:56.000Z</updated>
        <content type="html"><![CDATA[<p>这道题<s>其实很水</s>，用一个整形数组存放每个字母的按键次数即可<br>
附代码：</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int l[26] = {1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3,4, 1,2,3, 1,2,3,4};  //按键次数
int main()
{
    char c[200];
    while(gets(c))  //读入若干行句子（不要用scanf(&quot;%s&quot;, c)；和cin&gt;&gt;c;读到空格就要停
    {
        int ans = 0;  //按键次数总和
        for(int i=0; i&lt;strlen(c); ++i)  //遍历
        {
            if(c[i]&lt;='z' &amp;&amp; c[i]&gt;='a')  //如果是字母
                ans += l[c[i]-'a'];   //加上对应次数
            else if(c[i] == ' ')  //如果是空格
                ++ans; //加一次
        }
        printf(&quot;%d\n&quot;, ans);  //输出
    }
    return 0;  //愉快的结束
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4414 【[COCI2006-2007#2] ABC】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p4414-coci2006-20072-abc/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p4414-coci2006-20072-abc/">
        </link>
        <updated>2020-09-21T16:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>用简化的桶排序，再用if判断输出就行<br>
附AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
    int a, b, c, n[3], j = 0;//n为排序用数组，j为排序时下标
    char s[3];//s为输出顺序
    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;//输入数据
    cin&gt;&gt;s;
    for(int i=1; i&lt;=100; ++i)//循环排序【排序】
    {
        if(i == a)//如果是a，就把它放在第一位（最小）
        {
            n[j] = a;
            ++j;
            continue;
        }
        if(i == b)//同上
        {
            n[j] = b;
            ++j;
            continue;
        }
        if(i == c)//同上
        {
            n[j] = c;
            ++j;
            continue;
        }
        if(j ==3)//如果三个数顺序已经排好，退出循环
            break;
    }
    for(int i=0; i&lt;3; ++i)//选择输出【输出】
    {
        if(s[i] == 'A')//检查顺序
            cout&lt;&lt;n[0];
        if(s[i] == 'B')
            cout&lt;&lt;n[1];
        if(s[i] == 'C')
            cout&lt;&lt;n[2];
        cout&lt;&lt;' ';
    }
    return 0;//结束程序
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1059 【明明的随机数】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1059-ming-ming-de-sui-ji-shu/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1059-ming-ming-de-sui-ji-shu/">
        </link>
        <updated>2020-09-21T16:08:28.000Z</updated>
        <content type="html"><![CDATA[<p>看到去重+排序（数据范围不是很大）直接用桶排序<br>
上AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
bool number[1000]; //1000个“桶”
int main()
{
    int N, sum = 0, s;
    cin&gt;&gt;N;
    for(int i = 1; i&lt;=N; ++i)
    {
        cin&gt;&gt;s;//读入数据
        if(!number[s])//如果这个数没有出现过
        {
            number[s] = 1;//标记为出现
            ++sum;//计数器+1
        }
    }
    cout&lt;&lt;sum&lt;&lt;endl;//输出不相同的数的个数
    for(int i=0; i&lt;1000; ++i)//遍历数组
        if(number[i])//如果出现过就输出
            cout&lt;&lt;i&lt;&lt;' ';
    return 0;//结束程序
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1150 【Peter的烟】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p1150-peter-de-yan/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p1150-peter-de-yan/">
        </link>
        <updated>2020-09-21T16:07:52.000Z</updated>
        <content type="html"><![CDATA[<p>直接上AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
    int n, k, x = 1, sum = 0;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);//输入
    sum += n;//本来拥有的烟
    while(x&gt;0)
    {
        x = n/k;//可以换x根
        n = n-x*k+x;//剩下的烟蒂
        sum += x;//加上换来的烟
    }
    cout&lt;&lt;sum;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P3742  【umi的函数】]]></title>
        <id>https://diego3893.github.io/post/ti-jie-p3742-umi-de-han-shu/</id>
        <link href="https://diego3893.github.io/post/ti-jie-p3742-umi-de-han-shu/">
        </link>
        <updated>2020-09-21T16:06:43.000Z</updated>
        <content type="html"><![CDATA[<p>AC代码：</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
char s[100],s1[100],s2[100];//s为y,s1为x,s2为z
int n;
int main()
{
    cin&gt;&gt;n;
    for(int i=0;i&lt;n;i++)//输入
        cin&gt;&gt;s1[i];
    for(int i=0;i&lt;n;i++)
        cin&gt;&gt;s2[i];
    for(int i=0;i&lt;n;i++)
    {
        if(s1[i]&lt;s2[i])//判断是否存在
        {
            cout&lt;&lt;&quot;-1&quot;;
            return 0;
        }
    }
    for(int i=0;i&lt;n;i++)
    {
        if(s1[i]==s2[i])
        {
            s[i]='z';//保证大于等于s1[i]
        }
        else s[i]=s2[i];
    }
    puts(s);//输出
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单链表实现----学生成绩查询系统]]></title>
        <id>https://diego3893.github.io/post/dan-lian-biao-shi-xian-xue-sheng-cheng-ji-cha-xun-xi-tong/</id>
        <link href="https://diego3893.github.io/post/dan-lian-biao-shi-xian-xue-sheng-cheng-ji-cha-xun-xi-tong/">
        </link>
        <updated>2020-09-21T16:04:46.000Z</updated>
        <content type="html"><![CDATA[<p>代码注释较少，若给各位的阅读带来不便，请谅解<br>
本人蒟蒻一枚，写得也是很不容易了，请多多鼓励</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
void run(); //运行 
void menu();//菜单 
void Read();//读入 
void Put();//全部输出 
void Find();//查询 
void Insert();//添加 
void Delete(); //删除 
void Len();//输出长度 
void Save();//保存 
void Empty();//清空 
int Lenth();//求长度 
void readData();//提取数据 
void Data();//读取数据 
struct node{
    int number;
    char name[20];
    int ch;
    int ma;
    int en;
    int to = 0;
    double av;
    node *next;
}*head, *p, *r, a; 
int choose, member;
bool f = 1, flag;
int main()
{
    head = new node;
    r = head;
    system(&quot;color 74&quot;);
    cout&lt;&lt;&quot;欢迎使用成绩查询系统\nMADE BY DIEGO\n&quot;;
    system(&quot;pause&quot;);
    system(&quot;cls&quot;);
    Data();
    system(&quot;cls&quot;);
    while(f)
    {
        system(&quot;color f1&quot;);
        run();
    }
    return 0;
}
void run()
{
    menu();
    system(&quot;cls&quot;);
    return;
}
void menu()
{
    cout&lt;&lt;setw(50)&lt;&lt;&quot;MENU\n&quot;;
    cout&lt;&lt;&quot;1：录入； 2：查询； 3：添加； 4：删除； 5：清空； 6：显示所有； 7：学生人数  8：保存并退出\n&quot;;
    cout&lt;&lt;&quot;请输入您的选择：&quot;;
    scanf(&quot;%d&quot;, &amp;choose);
    switch(choose)
    {
        case 1:Read();break;
        case 2:Find();break;
        case 3:Insert();break;
        case 4:Delete();break;
        case 5:Empty();break;
        case 6:Put();break;
        case 7:Len();break; 
        case 8:Save();break; 
    }
    return;
}
void Read()
{
    system(&quot;color f2&quot;);
    cout&lt;&lt;&quot;请输入人数：&quot;;
    scanf(&quot;%d&quot;, &amp;member);
    cout&lt;&lt;&quot;输入顺序为：学号 姓名(长度不超过20) 语文分数 数学分数 英语分数\n&quot;; 
    for(int i=1; i&lt;=member; ++i)
    {
        scanf(&quot;%d%s%d%d%d&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en);
        p = new node;
        p-&gt;number = a.number;
        strcpy(p-&gt;name, a.name);
        p-&gt;ch = a.ch;
        p-&gt;ma = a.ma;
        p-&gt;en = a.en;
        p-&gt;to = a.ch+a.en+a.ma;
        p-&gt;av = p-&gt;to/3.0;
        p-&gt;next = NULL;
        r-&gt;next = p;
        r = p;
    }
    cout&lt;&lt;&quot;录入完成\n\n&quot;;
    system(&quot;pause&quot;); 
    return;
}
void Len()
{
    system(&quot;color f3&quot;);
    cout&lt;&lt;&quot;学生人数为：&quot;;
    int n = 0;
    node *s = head;
    while(s != NULL)
    {
        ++n;
        s = s-&gt;next;
    }
    cout&lt;&lt;n-1&lt;&lt;endl&lt;&lt;endl;
    system(&quot;pause&quot;); 
    return;
}
void Delete()
{
    int g; 
    system(&quot;color f5&quot;);
    cout&lt;&lt;&quot;请输入删除结点编号：&quot;;
    scanf(&quot;%d&quot;, &amp;g);
    node *x, *s;
    x = head;
    int j = 0;
    while(x-&gt;next!=NULL &amp;&amp; j&lt;g-1)
    {
        x = x-&gt;next;
        ++j;
    }
    if(x-&gt;next == NULL)
        printf(&quot;cannot find this one&quot;);
    else
    {
        s = x-&gt;next;
        x-&gt;next = s-&gt;next;
        free(s);
        cout&lt;&lt;&quot;删除成功\n\n&quot;;
    }
    system(&quot;pause&quot;);
    return;
}
void Insert()
{
    int d;
    system(&quot;color f6&quot;);
    cout&lt;&lt;&quot;请输入需添加的后一个结点位置：&quot;;
    scanf(&quot;%d&quot;, &amp;d);
    cout&lt;&lt;&quot;请输入数据（格式同录入数据）：&quot;;
    node *x, *s;
    x = head;
    int j = 0;
    while(x!=NULL &amp;&amp; j&lt;d-1)
    {
        x = x-&gt;next;
        ++j;
    }
    if(x == NULL)
        printf(&quot;cannot find this one&quot;);
    else
    {
        s = new node;
        scanf(&quot;%d%s%d%d%d&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en);
        s-&gt;number = a.number;
        strcpy(s-&gt;name, a.name);
        s-&gt;ch = a.ch;
        s-&gt;ma = a.ma;
        s-&gt;en = a.en;
        s-&gt;to = a.ch+a.en+a.ma;
        s-&gt;av = s-&gt;to/3.0;
        s-&gt;next = x-&gt;next;
        x-&gt;next = s;
        cout&lt;&lt;&quot;添加成功\n\n&quot;; 
    }
    system(&quot;pause&quot;);
    return;
}
void Put()
{
    system(&quot;color f9&quot;);
    if(Lenth() == 0)
    {
        cout&lt;&lt;&quot;无数据\n\n&quot;;
        system(&quot;pause&quot;);
        return;
    }
    cout&lt;&lt;&quot;输出顺序为：学号 姓名 语文分数 数学分数 英语分数 总分 平均分\n&quot;;
    p = head-&gt;next;
    while(p-&gt;next != NULL)
    {
        printf(&quot;%d &quot;, p-&gt;number);
        cout&lt;&lt;p-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
        p = p-&gt;next;
    }
    printf(&quot;%d &quot;, p-&gt;number);
    cout&lt;&lt;p-&gt;name;
    printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
    cout&lt;&lt;&quot;\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void Find()
{
    int pi;
    system(&quot;color f8&quot;);
    cout&lt;&lt;&quot;请输入结点位置：&quot;;
    scanf(&quot;%d&quot;, &amp;pi);
    node *s = head-&gt;next;
    int j = 1;
    while(s!=NULL &amp;&amp; j&lt;pi)
    {
        s = s-&gt;next;
        ++j;
    }
    if(s!=NULL &amp;&amp; j==pi)
    {
        printf(&quot;%d &quot;, s-&gt;number);
        cout&lt;&lt;s-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, s-&gt;ch, s-&gt;ma, s-&gt;en, s-&gt;to, s-&gt;av);
    }
    else
        cout&lt;&lt;&quot;cannot find this one&quot;;
    cout&lt;&lt;&quot;\n\n&quot;;
    system(&quot;pause&quot;);
    return;
}
int Lenth()
{
    int n = 0;
    node *s = head;
    while(s != NULL)
    {
        ++n;
        s = s-&gt;next;
    }
    return n-1;
}
void Empty()
{
    system(&quot;color f5&quot;);
    node *x, *s;
    x = head;
    while(x-&gt;next!=NULL)
    {
        s = x-&gt;next;
        x-&gt;next = s-&gt;next;
        free(s);
    }
    free(x);
    cout&lt;&lt;&quot;系统已清空\n\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void Save()
{
    system(&quot;color 7C&quot;);
    freopen(&quot;score.txt&quot;, &quot;w&quot;, stdout);
    printf(&quot;%d\n&quot;, Lenth());
    p = head-&gt;next;
    while(p-&gt;next != NULL)
    {
        printf(&quot;%d &quot;, p-&gt;number);
        cout&lt;&lt;p-&gt;name;
        printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
        p = p-&gt;next;
    }
    printf(&quot;%d &quot;, p-&gt;number);
    cout&lt;&lt;p-&gt;name;
    printf(&quot; %d %d %d %d %.2f\n&quot;, p-&gt;ch, p-&gt;ma, p-&gt;en, p-&gt;to, p-&gt;av);
    fclose(stdout);
    freopen(&quot;CON&quot;, &quot;w&quot;, stdout);
    cout&lt;&lt;&quot;保存成功\n\n蒟蒻代码，感谢使用\n&quot;;
    f = 0;
    return;
}
void Data()
{
    system(&quot;color 70&quot;);
    cout&lt;&lt;&quot;是否读取数据?(1 是,0 否):&quot;;
    cin&gt;&gt;flag;
    if(flag)
    {
        readData();
        cout&lt;&lt;&quot;读取成功\n&quot;;
    }
    else
        cout&lt;&lt;&quot;未读取数据\n&quot;;
    system(&quot;pause&quot;);
    return;
}
void readData()
{
    freopen(&quot;score.txt&quot;, &quot;r&quot;, stdin);
    scanf(&quot;%d&quot;, &amp;member);
    for(int i=1; i&lt;=member; ++i)
    {
        scanf(&quot;%d%s%d%d%d%d%f&quot;, &amp;a.number, &amp;a.name, &amp;a.ch, &amp;a.ma, &amp;a.en, &amp;a.to, &amp;a.av);
        p = new node;
        p-&gt;number = a.number;
        strcpy(p-&gt;name, a.name);
        p-&gt;ch = a.ch;
        p-&gt;ma = a.ma;
        p-&gt;en = a.en;
        p-&gt;to = a.to;
        p-&gt;av = a.av;
        p-&gt;next = NULL;
        r-&gt;next = p;
        r = p;
    }
    fclose(stdin);
    freopen(&quot;CON&quot;, &quot;r&quot;, stdin);
    return;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[deepin安装Lemon]]></title>
        <id>https://diego3893.github.io/post/deepin-an-zhuang-lemon/</id>
        <link href="https://diego3893.github.io/post/deepin-an-zhuang-lemon/">
        </link>
        <updated>2020-09-19T09:59:50.000Z</updated>
        <summary type="html"><![CDATA[<p>测评机乃OI之神器也！于Linux安装之实属重要！</p>
]]></summary>
        <content type="html"><![CDATA[<p>测评机乃OI之神器也！于Linux安装之实属重要！</p>
<!--more-->
<h1 id="下载资源">下载资源</h1>
<p>原项目：<br>
<gb user="iotang" type="star" count="1" size="1" width="200">Project_LemonLime</gb><br>
也可以在码云下载：<br>
<code>https://gitee.com/oierzcx/Project_LemonLime</code></p>
<hr>
<h1 id="本教程有视频">本教程有视频</h1>
<p>本人<s>辛苦录制11分钟的</s>教学视频：<br>
<code>https://www.bilibili.com/video/BV1ei4y1t7yR</code></p>
<h1 id="安装">安装</h1>
<h2 id="安装依赖">安装依赖</h2>
<pre><code class="language-shell">sudo apt install qt5-default build-essential
sudo apt install git
sudo apt install g++
</code></pre>
<h2 id="编译">编译</h2>
<pre><code class="language-shell">cd 源码目录
g++ watcher_unix.cpp -o watcher_unix -O2
qmake lemon.pro
make
</code></pre>
<h2 id="似乎可装可不装">似乎可装可不装</h2>
<pre><code class="language-shell">sudo apt install qtcreator
</code></pre>
<h2 id="设置全局开启">设置全局开启</h2>
<pre><code class="language-shell">cd 源码目录
sudo cp lemon /usr/bin
</code></pre>
<h1 id="效果">效果</h1>
<figure data-type="image" tabindex="1"><img src="http://blog.diego.plus:2000/usr/uploads/2020/05/2417492455.png" alt="Snipaste_2020-05-01_20-10-49.png" loading="lazy"></figure>
]]></content>
    </entry>
</feed>